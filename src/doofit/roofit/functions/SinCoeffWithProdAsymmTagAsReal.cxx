/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "SinCoeffWithProdAsymmTagAsReal.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::SinCoeffWithProdAsymmTagAsReal)

namespace doofit {
namespace roofit {
namespace functions {

long long SinCoeffWithProdAsymmTagAsReal::num_calls_evaluate_ = 0;
long long SinCoeffWithProdAsymmTagAsReal::num_calls_integral_ = 0;


SinCoeffWithProdAsymmTagAsReal::SinCoeffWithProdAsymmTagAsReal() :
  type_coeff_(kCType)
  {
  }

SinCoeffWithProdAsymmTagAsReal::SinCoeffWithProdAsymmTagAsReal(std::string name,
                                   RooAbsReal& _par_S,
                                   RooAbsReal& _par_omega_Bd,
                                   RooAbsReal& _par_omega_Bdb,
                                   RooAbsReal& _par_tag,
                                   RooAbsReal& _par_prod_asym,
                                   CoeffType type_coeff) :
  RooAbsReal(name.c_str(), name.c_str()),
  par_S_("par_S_","par_S_",this,_par_S),
  par_omega_Bd_("par_omega_Bd_","par_omega_Bd_",this,_par_omega_Bd),
  par_omega_Bdb_("par_omega_Bdb_","par_omega_Bdb_",this,_par_omega_Bdb),
  par_tag_("par_tag_","par_tag_",this,_par_tag),
  par_prod_asym_("par_prod_asym_","par_prod_asym_",this,_par_prod_asym),
  type_coeff_(type_coeff)
  {
  }

SinCoeffWithProdAsymmTagAsReal::SinCoeffWithProdAsymmTagAsReal(const SinCoeffWithProdAsymmTagAsReal& other, const char* name) :
  RooAbsReal(other,name),
  par_S_("par_S_",this,other.par_S_),
  par_omega_Bd_("par_omega_Bd_",this,other.par_omega_Bd_),
  par_omega_Bdb_("par_omega_Bdb_",this,other.par_omega_Bdb_),
  par_tag_("par_tag_",this,other.par_tag_),
  type_coeff_(other.type_coeff_),
  par_prod_asym_("par_prod_asym_",this,other.par_prod_asym_)
  {
  }

Int_t SinCoeffWithProdAsymmTagAsReal::getAnalyticalIntegral(RooArgSet& allVars,
                                        RooArgSet& analVars, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("SinCoeffWithProdAsymmTagAsReal::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  
  return 0;
}


Int_t SinCoeffWithProdAsymmTagAsReal::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("SinCoeffWithProdAsymmTagAsReal::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (normSet) normSet->Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
    
  return 0;
}
} // namespace functions
} // namespace roofit
} // namespace doofit

