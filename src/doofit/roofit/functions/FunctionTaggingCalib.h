/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_FUNCTIONS_FUNCTIONTAGGINGCALIB
#define DOOFIT_ROOFIT_FUNCTIONS_FUNCTIONTAGGINGCALIB

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

namespace doofit {
namespace roofit {
namespace functions {

class FunctionTaggingCalib : public RooAbsReal {
public:
  enum TagType {
    kBdType  = +1,
    kBdbType = -1
  };
  
  FunctionTaggingCalib() ;
  
  FunctionTaggingCalib(const char *name, const char *title,
                       RooAbsReal& _par_tag_eta,
                       RooAbsReal& _par_tag_p0,
                       RooAbsReal& _par_tag_p1,
                       RooAbsReal& _par_tag_meaneta);
  
  FunctionTaggingCalib(const char *name, const char *title,
                       RooAbsReal& _par_tag_eta,
                       RooAbsReal& _par_tag_p0,
                       RooAbsReal& _par_tag_p1,
                       RooAbsReal& _par_tag_delta_p0,
                       RooAbsReal& _par_tag_delta_p1,
                       RooAbsReal& _par_tag_meaneta);
  
  FunctionTaggingCalib(const char *name, const char *title,
                       RooAbsCategory& _cat_tag_OS,
                       RooAbsReal& _par_tag_p0_OS,
                       RooAbsReal& _par_tag_p1_OS,
                       RooAbsReal& _par_tag_meaneta_OS,
                       RooAbsReal& _par_tag_eta_OS,
                       RooAbsCategory& _cat_tag_SS,
                       RooAbsReal& _par_tag_p0_SS,
                       RooAbsReal& _par_tag_p1_SS,
                       RooAbsReal& _par_tag_meaneta_SS,
                       RooAbsReal& _par_tag_eta_SS);
  
  FunctionTaggingCalib(const char *name, const char *title,
                       RooAbsCategory& _cat_tag_OS,
                       RooAbsReal& _par_tag_p0_OS,
                       RooAbsReal& _par_tag_p1_OS,
                       RooAbsReal& _par_tag_meaneta_OS,
                       RooAbsReal& _par_tag_eta_OS,
                       RooAbsReal& _par_tag_delta_p0_OS,
                       RooAbsReal& _par_tag_delta_p1_OS,
                       RooAbsCategory& _cat_tag_SS,
                       RooAbsReal& _par_tag_p0_SS,
                       RooAbsReal& _par_tag_p1_SS,
                       RooAbsReal& _par_tag_meaneta_SS,
                       RooAbsReal& _par_tag_eta_SS,
                       RooAbsReal& _par_tag_delta_p0_SS,
                       RooAbsReal& _par_tag_delta_p1_SS,
                       TagType _type_tag);
  
  FunctionTaggingCalib(const FunctionTaggingCalib& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new FunctionTaggingCalib(*this,newname); }
  inline virtual ~FunctionTaggingCalib() {
    #ifdef FUNCTIONS_COUNT_CALLS
    std::cout << "FunctionTaggingCalib::~FunctionTaggingCalib(): # evaluate calls: " << num_calls_evaluate_ << std::endl;
    std::cout << "FunctionTaggingCalib::~FunctionTaggingCalib(): # integral calls: " << num_calls_integral_ << std::endl;
    #endif
  }

protected:

  RooRealProxy par_tag_p0 ;
  RooRealProxy par_tag_p1 ;
  RooRealProxy par_tag_meaneta ;
  RooRealProxy par_tag_eta ;
  RooRealProxy par_tag_delta_p0 ;
  RooRealProxy par_tag_delta_p1 ;
  RooRealProxy par_tag_p0_OS ;
  RooRealProxy par_tag_p1_OS ;
  RooRealProxy par_tag_meaneta_OS ;
  RooRealProxy par_tag_eta_OS ;
  RooRealProxy par_tag_delta_p0_OS ;
  RooRealProxy par_tag_delta_p1_OS ;
  RooRealProxy par_tag_p0_SS ;
  RooRealProxy par_tag_p1_SS ;
  RooRealProxy par_tag_meaneta_SS ;
  RooRealProxy par_tag_eta_SS ;
  RooRealProxy par_tag_delta_p0_SS ;
  RooRealProxy par_tag_delta_p1_SS ;
  
  RooCategoryProxy cat_tag_OS ;
  RooCategoryProxy cat_tag_SS ;
  
  const TagType type_tag ;
  const bool tagging_asymmetries ;
  const bool tagging_combination ;
  
  static long long num_calls_evaluate_;
  static long long num_calls_integral_;
  
  inline Double_t evaluate() const {
    #ifdef FUNCTIONS_COUNT_CALLS
    ++num_calls_evaluate_;
    #endif
    // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
    
    //std::cout <<  << std::endl;
    
    if (tagging_combination) {
      Double_t omega_OS;
      Double_t omega_SS;
      if (tagging_asymmetries) {
        omega_OS = par_tag_p0_OS + par_tag_meaneta_OS + 0.5*type_tag*par_tag_delta_p0_OS + (par_tag_p1_OS + 0.5*type_tag*par_tag_delta_p1_OS)*(par_tag_eta_OS - par_tag_meaneta_OS);
        omega_SS = par_tag_p0_SS + 0.5*type_tag*par_tag_delta_p0_SS + (par_tag_p1_SS + 0.5*type_tag*par_tag_delta_p1_SS)*(par_tag_eta_SS-par_tag_meaneta_SS);
      }
      else {
        omega_OS = par_tag_p0_OS + par_tag_meaneta_OS + par_tag_p1_OS*(par_tag_eta_OS - par_tag_meaneta_OS);
        omega_SS = par_tag_p0_SS + par_tag_p1_SS*(par_tag_eta_SS - par_tag_meaneta_SS);
      }
      if (cat_tag_OS == cat_tag_SS) {
        return omega_OS*omega_SS/(omega_OS*omega_SS + (1.0-omega_OS)*(1.0-omega_SS));
      }
      else {
        if ((par_tag_p0_SS + par_tag_p1_SS*(par_tag_eta_SS - par_tag_meaneta_SS)) >= (par_tag_p0_OS + par_tag_meaneta_OS + par_tag_p1_OS*(par_tag_eta_OS - par_tag_meaneta_OS))) {
          return omega_OS*(1-omega_SS)/(omega_OS*(1.0-omega_SS) + (1.0-omega_OS)*omega_SS);
        }
        else return (1-omega_OS)*omega_SS/(omega_OS*(1.0-omega_SS) + (1.0-omega_OS)*omega_SS);
      }
    }
    else {
      if (tagging_asymmetries) {
        if (par_tag_p0 < 0.2) {
          return  par_tag_p0 + par_tag_meaneta + 0.5*par_tag_delta_p0 + (par_tag_p1 + 0.5*par_tag_delta_p1) * (par_tag_eta - par_tag_meaneta);
        }
        else return par_tag_p0 + 0.5*par_tag_delta_p0 + (par_tag_p1 + 0.5*par_tag_delta_p1) * (par_tag_eta - par_tag_meaneta);
      }
      else {
        if (par_tag_p0 < 0.2) {
          return  par_tag_p0 + par_tag_meaneta + par_tag_p1 * (par_tag_eta - par_tag_meaneta);
        }
        else return par_tag_p0 + par_tag_p1 * (par_tag_eta - par_tag_meaneta);
      }
    }
  }

  virtual Int_t	getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars,
                                      const char* rangeName = 0) const;
  
  virtual Int_t	getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const;
  
  virtual Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const {
    
    if (1 == code) {
      //std::cout << "FunctionTaggingCalib::analyticalIntegral(" << code << ", ...): Called." << std::endl;
      return 0.0;
    }
    // must not get here
    //assert(1 == 0);
  }
  
private:

  ClassDef(FunctionTaggingCalib,1) // Your description goes here...
};
} // namespace functions
} // namespace roofit
} // namespace doofit

#endif
