/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef SINGLEMISTAGCALIBRATION
#define SINGLEMISTAGCALIBRATION

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
 
namespace doofit {
namespace roofit {
namespace functions {

class SingleMistagCalibration : public RooAbsReal {
public:
  SingleMistagCalibration() {} ; 
  SingleMistagCalibration(std::string name,
	      RooAbsReal& _eta_,
	      RooAbsReal& _p0_,
	      RooAbsReal& _p1_,
	      RooAbsReal& _avg_eta_);
  SingleMistagCalibration(const SingleMistagCalibration& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new SingleMistagCalibration(*this,newname); }
  inline virtual ~SingleMistagCalibration() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

  RooRealProxy eta_ ;
  RooRealProxy p0_ ;
  RooRealProxy p1_ ;
  RooRealProxy avg_eta_ ;
  
  Double_t evaluate() const ;

private:

  ClassDef(SingleMistagCalibration,1) // Your description goes here...
};

}
}
}

#endif
