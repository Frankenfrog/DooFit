/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "LinearFunctionWithOffset.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::LinearFunctionWithOffset)

namespace doofit {
namespace roofit {
namespace functions {

long long LinearFunctionWithOffset::num_calls_evaluate_ = 0;
long long LinearFunctionWithOffset::num_calls_integral_ = 0;

 LinearFunctionWithOffset::LinearFunctionWithOffset(std::string name, 
                        RooAbsReal& _par_x,
                        RooAbsReal& _par_slope,
                        RooAbsReal& _par_offset) :
   RooAbsReal(name.c_str(),name.c_str()), 
   par_x("par_x","par_x",this,_par_x),
   par_slope("par_slope","par_slope",this,_par_slope),
   par_offset("par_offset","par_offset",this,_par_offset)
 {
 } 


 LinearFunctionWithOffset::LinearFunctionWithOffset(const LinearFunctionWithOffset& other, const char* name) :  
   RooAbsReal(other,name), 
   par_x("par_x",this,other.par_x),
   par_slope("par_slope",this,other.par_slope),
   par_offset("par_offset",this,other.par_offset)
 {
 } 

Int_t LinearFunctionWithOffset::getAnalyticalIntegral(RooArgSet& allVars,
                                               RooArgSet& analVars, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("LinearFunctionWithOffset::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
//  analVars.Print();
  allVars.Print();
  #endif
  
  //if (matchArgs(allVars, analVars, cat_tag)) return 1;
  
  return 0;
}

Int_t LinearFunctionWithOffset::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("LinearFunctionWithOffset::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (normSet) normSet->Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  
  //if (matchArgs(allVars, analVars, cat_tag)) return 1;
  
  return 0;
}
} // namespace functions
} // namespace roofit
} // namespace doofit
