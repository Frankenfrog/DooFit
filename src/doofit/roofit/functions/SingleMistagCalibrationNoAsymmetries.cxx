/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// This class provides an analytic function for mistag calibration using the linear
// formula: p0 + p1 * ( eta - avg_eta ) 

#include "Riostream.h" 

#include "SingleMistagCalibrationNoAsymmetries.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::SingleMistagCalibrationNoAsymmetries) 

namespace doofit {
namespace roofit {
namespace functions {

 SingleMistagCalibrationNoAsymmetries::SingleMistagCalibrationNoAsymmetries(std::string name, 
                        RooAbsReal& _eta_,
                        RooAbsReal& _p0_,
                        RooAbsReal& _p1_,
                        RooAbsReal& _avg_eta_) :
   RooAbsReal(name.c_str(),name.c_str()), 
   eta_("eta_","eta_",this,_eta_),
   p0_("p0_","p0_",this,_p0_),
   p1_("p1_","p1_",this,_p1_),
   avg_eta_("avg_eta_","avg_eta_",this,_avg_eta_)
 { 
 }


 SingleMistagCalibrationNoAsymmetries::SingleMistagCalibrationNoAsymmetries(const SingleMistagCalibrationNoAsymmetries& other, const char* name) :  
   RooAbsReal(other,name), 
   eta_("eta_",this,other.eta_),
   p0_("p0_",this,other.p0_),
   p1_("p1_",this,other.p1_),
   avg_eta_("avg_eta_",this,other.avg_eta_)
 { 
 } 



 Double_t SingleMistagCalibrationNoAsymmetries::evaluate() const 
 { 
   return p0_ + p1_ * ( eta_ - avg_eta_ )  ; 
 } 



 Int_t SingleMistagCalibrationNoAsymmetries::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES
   // std::cout << "SingleMistagCalibrationNoAsymmetries::getAnalyticalIntegral call" << std::endl;   
   // if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t SingleMistagCalibrationNoAsymmetries::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x
   // std::cout << "SingleMistagCalibrationNoAsymmetries::analyticalIntegral call" << std::endl;
   // assert(code==1) ; 
   // return (x.max(rangeName)-x.min(rangeName)) ; 
   return 0 ; 
 } 

}
}
}


