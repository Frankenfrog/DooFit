/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "FunctionCoeffSinh.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::FunctionCoeffSinh)

namespace doofit {
namespace roofit {
namespace functions {

long long FunctionCoeffSinh::num_calls_evaluate_ = 0;
long long FunctionCoeffSinh::num_calls_integral_ = 0;


 FunctionCoeffSinh::FunctionCoeffSinh(std::string name,
                        RooAbsReal& _par_sinh) :
   RooAbsReal(name.c_str(), name.c_str()),
   par_sinh("par_sinh","par_sinh",this,_par_sinh)
 {
 } 


 FunctionCoeffSinh::FunctionCoeffSinh(const FunctionCoeffSinh& other, const char* name) :  
   RooAbsReal(other,name), 
   par_sinh("par_sinh",this,other.par_sinh)
 {
 } 

Int_t FunctionCoeffSinh::getAnalyticalIntegral(RooArgSet& allVars,
                                              RooArgSet& analVars, const char* rangeName) const
{
  if (allVars.getSize() == 0) {
    return 0;
  }
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("FunctionCoeffSinh::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //  analVars.Print();
  allVars.Print();
  #endif
  //if (matchArgs(allVars, analVars, cat_tag)) return 1;
  
  return 0;
}

Int_t FunctionCoeffSinh::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("FunctionCoeffSinh::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (normSet) normSet->Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  
  //if (matchArgs(allVars, analVars, cat_tag)) return 1;
  
  return 0;
}

} // namespace functions
} // namespace roofit
} // namespace doofit


