/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_FUNCTIONS_QuadraticFunctionWITHOFFSET
#define DOOFIT_ROOFIT_FUNCTIONS_QuadraticFunctionWITHOFFSET

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

//#define FUNCTIONS_COUNT_CALLS

namespace doofit {
namespace roofit {
namespace functions {

class QuadraticFunctionWithOffset : public RooAbsReal {
public:
  QuadraticFunctionWithOffset() {} ; 
  QuadraticFunctionWithOffset(std::string name,
	      RooAbsReal& _par_x,
        RooAbsReal& _par_quadratic_term,
	      RooAbsReal& _par_linear_term,
	      RooAbsReal& _par_offset);
  QuadraticFunctionWithOffset(const QuadraticFunctionWithOffset& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new QuadraticFunctionWithOffset(*this,newname); }
  inline virtual ~QuadraticFunctionWithOffset() {
    #ifdef FUNCTIONS_COUNT_CALLS
    std::cout << "QuadraticFunctionWithOffset::~QuadraticFunctionWithOffset(): # evaluate calls: " << num_calls_evaluate_ << std::endl;
    std::cout << "QuadraticFunctionWithOffset::~QuadraticFunctionWithOffset(): # integral calls: " << num_calls_integral_ << std::endl;
    #endif
  }

protected:

  RooRealProxy par_x ;
  RooRealProxy par_quadratic_term ;
  RooRealProxy par_linear_term ;
  RooRealProxy par_offset ;

  static long long num_calls_evaluate_;
  static long long num_calls_integral_;
  
  inline Double_t evaluate() const {
    #ifdef FUNCTIONS_COUNT_CALLS
    ++num_calls_evaluate_;
    #endif
    // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
    
    //std::cout << par_quadratic_term*par_x*par_x + par_linear_term*par_x + par_offset << std::endl;
    
    return par_quadratic_term*par_x*par_x + par_linear_term*par_x + par_offset;
  }
  
  virtual Int_t	getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const;
  
  virtual Int_t	getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const;


private:

  ClassDef(QuadraticFunctionWithOffset,1) // Your description goes here...
};
} // namespace functions
} // namespace roofit
} // namespace doofit

#endif
