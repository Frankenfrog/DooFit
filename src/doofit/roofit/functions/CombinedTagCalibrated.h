/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_FUNCTIONS_COMBINEDTAGCALIBRATED
#define DOOFIT_ROOFIT_FUNCTIONS_COMBINEDTAGCALIBRATED

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

namespace doofit {
namespace roofit {
namespace functions {

class CombinedTagCalibrated : public RooAbsReal {
public:
  
  CombinedTagCalibrated() {};
  
  CombinedTagCalibrated(const char *name, const char *title,
                       RooAbsCategory& _cat_tag_OS,
                       RooAbsReal& _par_tag_omega_OS,
                       RooAbsCategory& _cat_tag_SS,
                       RooAbsReal& _par_tag_omega_SS);
  
  CombinedTagCalibrated(const CombinedTagCalibrated& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new CombinedTagCalibrated(*this,newname); }
  inline virtual ~CombinedTagCalibrated() {
    #ifdef FUNCTIONS_COUNT_CALLS
    std::cout << "CombinedTagCalibrated::~CombinedTagCalibrated(): # evaluate calls: " << num_calls_evaluate_ << std::endl;
    std::cout << "CombinedTagCalibrated::~CombinedTagCalibrated(): # integral calls: " << num_calls_integral_ << std::endl;
    #endif
  }

protected:

  RooRealProxy par_tag_omega_OS ;
  RooRealProxy par_tag_omega_SS ;
  
  RooCategoryProxy cat_tag_OS ;
  RooCategoryProxy cat_tag_SS ;
  
  static long long num_calls_evaluate_;
  static long long num_calls_integral_;
  
  inline Double_t evaluate() const {
    #ifdef FUNCTIONS_COUNT_CALLS
    ++num_calls_evaluate_;
    #endif
    // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
    
    //std::cout <<  << std::endl;
    if (cat_tag_OS == cat_tag_SS) return int(cat_tag_OS);
    else {
      if (par_tag_omega_OS >= par_tag_omega_SS) return int(cat_tag_SS);
      else return int(cat_tag_OS);
    }
  }

  virtual Int_t	getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars,
                                      const char* rangeName = 0) const;
  
  virtual Int_t	getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const;
  
  virtual Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const {
    
    if (1 == code) {
      //std::cout << "CombinedTagCalibrated::analyticalIntegral(" << code << ", ...): Called." << std::endl;
      return 0.0;
    }
    // must not get here
    //assert(1 == 0);
  }
  
private:

  ClassDef(CombinedTagCalibrated,1) // Your description goes here...
};
} // namespace functions
} // namespace roofit
} // namespace doofit

#endif
