/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_FUNCTIONS_POLYTEST
#define DOOFIT_ROOFIT_FUNCTIONS_POLYTEST

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsPdf.h"
#include "RooAbsCategory.h"

namespace doofit {
namespace roofit {
namespace functions {

class PolyTest : public RooAbsPdf {
public:
  PolyTest() {} ; 
  PolyTest(const std::string name,
	      RooAbsReal& _x_,
	      RooAbsReal& _c00_,
	      RooAbsReal& _c01_,
	      RooAbsReal& _c02_,
	      RooAbsReal& _c03_,
        RooAbsReal& _c04_,
        RooAbsReal& _c05_,
        RooAbsReal& _c06_,
        RooAbsReal& _c07_,
        RooAbsReal& _c08_,
        RooAbsReal& _c09_,
        RooAbsReal& _c10_,
        RooAbsReal& _c11_,
        RooAbsReal& _c12_,
        RooAbsReal& _c13_,
        RooAbsReal& _c14_,
        RooAbsReal& _c15_);
  PolyTest(const PolyTest& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new PolyTest(*this,newname); }
  inline virtual ~PolyTest() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

  RooRealProxy x_ ;
  RooRealProxy c00_ ;
  RooRealProxy c01_ ;
  RooRealProxy c02_ ;
  RooRealProxy c03_ ;
  RooRealProxy c04_ ;
  RooRealProxy c05_ ;
  RooRealProxy c06_ ;
  RooRealProxy c07_ ;
  RooRealProxy c08_ ;
  RooRealProxy c09_ ;
  RooRealProxy c10_ ;
  RooRealProxy c11_ ;
  RooRealProxy c12_ ;
  RooRealProxy c13_ ;
  RooRealProxy c14_ ;
  RooRealProxy c15_ ;
  
  Double_t evaluate() const ;

private:

  Double_t F1(double x) const;
  Double_t F2(double x) const;
  Double_t F3(double x) const;
  Double_t F4(double x) const;
  Double_t F5(double x) const;


  ClassDef(PolyTest,1) // Your description goes here...
};

}
}
}

#endif
