/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "FunctionCoeffSin.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

long long FunctionCoeffSin::num_calls_evaluate_ = 0;
long long FunctionCoeffSin::num_calls_integral_ = 0;

ClassImp(FunctionCoeffSin) 

FunctionCoeffSin::FunctionCoeffSin()
: type_coeff_(kCType),
per_event_tagging_(false),
const1_(0.0),
const2_(0.0)
{
  
}

 FunctionCoeffSin::FunctionCoeffSin(std::string name,
                                    RooAbsReal& _par_S,
                                    RooAbsReal& _par_omega,
                                    RooAbsCategory& _cat_tag,
                                    CoeffType type_coeff) :
   RooAbsReal(name.c_str(), name.c_str()),
   par_S("par_S","par_S",this,_par_S),
   par_omega("par_omega","par_omega",this,_par_omega),
   cat_tag("cat_tag","cat_tag",this,_cat_tag),
   type_coeff_(type_coeff),
   per_event_tagging_(false),
   const1_(0.0),
   const2_(0.0)
 {
 } 

FunctionCoeffSin::FunctionCoeffSin(std::string name,
                                   RooAbsReal& _par_S,
                                   RooAbsReal& _par_tag_p1,
                                   RooAbsReal& _par_tag_p0,
                                   RooAbsReal& _par_tag_meaneta,
                                   RooAbsReal& _par_tag_eta,
                                   RooAbsCategory& _cat_tag,
                                   CoeffType type_coeff) :
RooAbsReal(name.c_str(), name.c_str()),
par_S("par_S","par_S",this,_par_S),
cat_tag("cat_tag","cat_tag",this,_cat_tag),
type_coeff_(type_coeff),
par_tag_p1_("par_tag_p1_","par_tag_p1_",this,_par_tag_p1),
par_tag_p0_("par_tag_p0_","par_tag_p0_",this,_par_tag_p0),
par_tag_meaneta_("par_tag_meaneta_","par_tag_meaneta_",this,_par_tag_meaneta),
par_tag_eta_("par_tag_eta_","par_tag_eta_",this,_par_tag_eta),
per_event_tagging_(true),
const1_(type_coeff_*(1.0 + 2.0*par_tag_p1_*par_tag_meaneta_ - 2.0*par_tag_p0_)),
const2_(-2.0*type_coeff_*par_tag_p1_)
{
} 


 FunctionCoeffSin::FunctionCoeffSin(const FunctionCoeffSin& other, const char* name) :  
RooAbsReal(other,name), 
par_S("par_S",this,other.par_S),
par_omega("par_omega",this,other.par_omega),
cat_tag("cat_tag",this,other.cat_tag),
type_coeff_(other.type_coeff_),
par_tag_p1_("par_tag_p1_",this,other.par_tag_p1_),
par_tag_p0_("par_tag_p0_",this,other.par_tag_p0_),
par_tag_meaneta_("par_tag_meaneta_",this,other.par_tag_meaneta_),
par_tag_eta_("par_tag_eta_",this,other.par_tag_eta_),
per_event_tagging_(other.per_event_tagging_),
const1_(other.const1_),
const2_(other.const2_)
 {
 } 

Int_t FunctionCoeffSin::getAnalyticalIntegral(RooArgSet& allVars,
                                        RooArgSet& analVars, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("FunctionCoeffSin::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  
  matchArgs(allVars, analVars, cat_tag);
  if (per_event_tagging_) { matchArgs(allVars, analVars, par_tag_eta_); }
  
  if (analVars.contains(cat_tag.arg())) {
    return 1;
  }
  
  return 0;
}


Int_t FunctionCoeffSin::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("FunctionCoeffSin::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (normSet) normSet->Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  
  //if (matchArgs(allVars, analVars, cat_tag)) return 1;
  
  return 0;
}

