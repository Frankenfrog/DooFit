/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_FUNCTIONS_FUNCTIONCOEFFCOSH
#define DOOFIT_ROOFIT_FUNCTIONS_FUNCTIONCOEFFCOSH

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

namespace doofit {
namespace roofit {
namespace functions {

class FunctionCoeffCosh : public RooAbsReal {
public:
  FunctionCoeffCosh() {} ;
  FunctionCoeffCosh(const char *name,
                      RooAbsReal& _par_cosh);
  FunctionCoeffCosh(const char *name,
                    RooAbsReal& _par_tag_p0,
                    RooAbsReal& _par_tag_p1,
                    RooAbsReal& _par_tag_meaneta,
                    RooAbsReal& _par_tag_delta_p0,
                    RooAbsReal& _par_tag_delta_p1,
                    RooAbsReal& _par_tag_eta,
                    RooAbsReal& _par_prod_asym,
                    RooAbsCategory& _cat_tag);
  
  FunctionCoeffCosh(const FunctionCoeffCosh& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new FunctionCoeffCosh(*this,newname); }
  inline virtual ~FunctionCoeffCosh() { }

protected:

  RooRealProxy par_cosh ;
  RooRealProxy par_tag_p0_ ;
  RooRealProxy par_tag_p1_ ;
  RooRealProxy par_tag_meaneta_ ;
  RooRealProxy par_tag_delta_p0_ ;
  RooRealProxy par_tag_delta_p1_ ;
  RooRealProxy par_tag_eta_ ;
  RooRealProxy par_prod_asym_ ;
  
  RooCategoryProxy  cat_tag ;
  
  inline Double_t evaluate() const {
    return 1.0 - cat_tag*(par_tag_delta_p0_+par_tag_delta_p1_*(par_tag_eta_-par_tag_meaneta_)) - cat_tag*par_prod_asym_*(1.0 - 2.0*(par_tag_meaneta_+par_tag_p0_ + par_tag_p1_*(par_tag_eta_-par_tag_meaneta_)));
  }

  virtual Int_t	getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars,
                                      const char* rangeName = 0) const;
  
  virtual Int_t	getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const;
  
  virtual Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const {
    
    if (1 == code) {
      //std::cout << "FunctionCoeffCosh::analyticalIntegral(" << code << ", ...): Called." << std::endl;
      return 0.0;
    }
    // must not get here
    //assert(1 == 0);
  }
  
private:

  ClassDef(FunctionCoeffCosh,1) // Your description goes here...
};
} // namespace functions
} // namespace roofit
} // namespace doofit

#endif
