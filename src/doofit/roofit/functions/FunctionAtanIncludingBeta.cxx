/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "FunctionAtanIncludingBeta.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(FunctionAtanIncludingBeta) 

long long FunctionAtanIncludingBeta::num_calls_evaluate_ = 0;
long long FunctionAtanIncludingBeta::num_calls_integral_ = 0;

 FunctionAtanIncludingBeta::FunctionAtanIncludingBeta(const char *name, const char *title, 
                        RooAbsReal& _par_x,
                        RooAbsReal& _par_slope_a,
                        RooAbsReal& _par_slope_b,
                        RooAbsReal& _par_beta) :
   RooAbsReal(name,title), 
   par_x("par_x","par_x",this,_par_x),
   par_slope_a("par_slope_a","par_slope_a",this,_par_slope_a),
   par_slope_b("par_slope_b","par_slope_b",this,_par_slope_b),
   par_beta("par_beta","par_beta",this,_par_beta)
 {
 } 


 FunctionAtanIncludingBeta::FunctionAtanIncludingBeta(const FunctionAtanIncludingBeta& other, const char* name) :  
   RooAbsReal(other,name), 
   par_x("par_x",this,other.par_x),
   par_slope_a("par_slope_a",this,other.par_slope_a),
   par_slope_b("par_slope_b",this,other.par_slope_b),
   par_beta("par_beta",this,other.par_beta)
 {
 } 

Int_t FunctionAtanIncludingBeta::getAnalyticalIntegral(RooArgSet& allVars,
                                              RooArgSet& analVars, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  //if (matchArgs(allVars, analVars, cat_tag)) return 1;
  std::printf("FunctionAtanIncludingBeta::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  
  return 0;
}


Int_t FunctionAtanIncludingBeta::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
  std::printf("FunctionAtanIncludingBeta::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
              __func__, __LINE__, __FILE__);
  //analVars.Print();
  allVars.Print();
  if (normSet) normSet->Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  
  //if (matchArgs(allVars, analVars, cat_tag)) return 1;
  
  return 0;
}
