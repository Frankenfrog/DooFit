/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "FunctionCoeffCosh.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::FunctionCoeffCosh)

namespace doofit {
namespace roofit {
namespace functions {

FunctionCoeffCosh::FunctionCoeffCosh(const char *name,
                                     RooAbsReal& _par_cosh) :
   RooAbsReal(name,name),
   par_cosh("par_cosh","par_cosh",this,_par_cosh)
 { 
 } 

FunctionCoeffCosh::FunctionCoeffCosh(const char *name,
                                     RooAbsReal& _par_tag_p0,
                                     RooAbsReal& _par_tag_p1,
                                     RooAbsReal& _par_tag_meaneta,
                                     RooAbsReal& _par_tag_delta_p0,
                                     RooAbsReal& _par_tag_delta_p1,
                                     RooAbsReal& _par_tag_eta,
                                     RooAbsReal& _par_prod_asym,
                                     RooAbsCategory& _cat_tag) :
  RooAbsReal(name,name),
  par_tag_p0_("par_tag_p0_","par_tag_p0_",this,_par_tag_p0),
  par_tag_p1_("par_tag_p1_","par_tag_p1_",this,_par_tag_p1),
  par_tag_meaneta_("par_tag_meaneta_","par_tag_meaneta_",this,_par_tag_meaneta),
  par_tag_delta_p0_("par_tag_delta_p0_","par_tag_delta_p0_",this,_par_tag_delta_p0),
  par_tag_delta_p1_("par_tag_delta_p1_","par_tag_delta_p1_",this,_par_tag_delta_p1),
  par_tag_eta_("par_tag_eta_","par_tag_eta_",this,_par_tag_eta),
  par_prod_asym_("par_prod_asym_","par_prod_asym_",this,_par_prod_asym),
  cat_tag("cat_tag","cat_tag",this,_cat_tag)
  {
  }

  
FunctionCoeffCosh::FunctionCoeffCosh(const FunctionCoeffCosh& other, const char* name) :
  RooAbsReal(other,name),
  par_cosh("par_cosh",this,other.par_cosh),
  cat_tag("cat_tag","cat_tag",this,other.cat_tag),
  par_tag_p0_("par_tag_p0_","par_tag_p0_",this,other.par_tag_p0_),
  par_tag_p1_("par_tag_p1_","par_tag_p1_",this,other.par_tag_p1_),
  par_tag_meaneta_("par_tag_meaneta_","par_tag_meaneta_",this,other.par_tag_meaneta_),
  par_tag_delta_p0_("par_tag_delta_p0_","par_tag_delta_p0_",this,other.par_tag_delta_p0_),
  par_tag_delta_p1_("par_tag_delta_p1_","par_tag_delta_p1_",this,other.par_tag_delta_p1_),
  par_tag_eta_("par_tag_eta_","par_tag_eta_",this,other.par_tag_eta_),
  par_prod_asym_("par_prod_asym_","par_prod_asym_",this,other.par_prod_asym_)
 { 
 } 



// Double_t FunctionCoeffCosh::evaluate() const 
// { 
//   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
//   return 1.0 ; 
// }
  
Int_t FunctionCoeffCosh::getAnalyticalIntegral(RooArgSet& allVars,
                                                RooArgSet& analVars, const char* rangeName) const
{
#ifdef FUNCTIONS_COUNT_CALLS
    std::printf("FunctionCoeffCosh::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
                __func__, __LINE__, __FILE__);
    //analVars.Print();
    allVars.Print();
    if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
#endif
    
    matchArgs(allVars, analVars, cat_tag);
    matchArgs(allVars, analVars, par_tag_eta_);
    
    if (analVars.contains(cat_tag.arg())) {
      return 1;
    }
    
    return 0;
}
  
  
Int_t FunctionCoeffCosh::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
#ifdef FUNCTIONS_COUNT_CALLS
    std::printf("FunctionCoeffCosh::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
                __func__, __LINE__, __FILE__);
    //analVars.Print();
    allVars.Print();
    if (normSet) normSet->Print();
    if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
#endif
    
    //if (matchArgs(allVars, analVars, cat_tag)) return 1;
    
    return 0;
}
} // namespace functions
} // namespace roofit
} // namespace doofit
