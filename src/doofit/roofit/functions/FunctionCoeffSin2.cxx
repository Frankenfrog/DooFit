/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "FunctionCoeffSin2.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::FunctionCoeffSin2)

namespace doofit {
namespace roofit {
namespace functions {
 
FunctionCoeffSin2::FunctionCoeffSin2()
  : type_coeff_(kCType)
  {
    
  }
  
FunctionCoeffSin2::FunctionCoeffSin2(const char *name, const char *title,
//                                     RooAbsReal& _par_S,
                                     RooAbsReal& _par_tag_p0,
                                     RooAbsReal& _par_tag_p1,
                                     RooAbsReal& _par_tag_meaneta,
                                     RooAbsReal& _par_tag_delta_p0,
                                     RooAbsReal& _par_tag_delta_p1,
                                     RooAbsReal& _par_tag_eta,
                                     RooAbsReal& _par_prod_asym,
                                     RooAbsCategory& _cat_tag,
                                     CoeffType type_coeff) :
  RooAbsReal(name,title),
//  par_S("par_S","par_S",this,_par_S),
  par_tag_p0("par_tag_p0","par_tag_p0",this,_par_tag_p0),
  par_tag_p1("par_tag_p1","par_tag_p1",this,_par_tag_p1),
  par_tag_meaneta("par_tag_meaneta","par_tag_meaneta",this,_par_tag_meaneta),
  par_tag_delta_p0("par_tag_delta_p0","par_tag_delta_p0",this,_par_tag_delta_p0),
  par_tag_delta_p1("par_tag_delta_p1","par_tag_delta_p1",this,_par_tag_delta_p1),
  par_tag_eta("par_tag_eta","par_tag_eta",this,_par_tag_eta),
  par_prod_asym("par_prod_asym","par_prod_asym",this,_par_prod_asym),
  cat_tag("cat_tag","cat_tag",this,_cat_tag),
  type_coeff_(type_coeff)
  {
  }

  
FunctionCoeffSin2::FunctionCoeffSin2(const FunctionCoeffSin2& other, const char* name) :
  RooAbsReal(other,name),
//  par_S("par_S","par_S",this,other.par_S),
  par_tag_p0("par_tag_p0",this,other.par_tag_p0),
  par_tag_p1("par_tag_p1",this,other.par_tag_p1),
  par_tag_meaneta("par_tag_meaneta",this,other.par_tag_meaneta),
  par_tag_delta_p0("par_tag_delta_p0",this,other.par_tag_delta_p0),
  par_tag_delta_p1("par_tag_delta_p1",this,other.par_tag_delta_p1),
  par_tag_eta("par_tag_eta",this,other.par_tag_eta),
  par_prod_asym("par_prod_asym",this,other.par_prod_asym),
  cat_tag("cat_tag",this,other.cat_tag),
  type_coeff_(other.type_coeff_)
 {
 } 

Int_t FunctionCoeffSin2::getAnalyticalIntegral(RooArgSet& allVars,
                                                     RooArgSet& analVars, const char* rangeName) const
{
#ifdef FUNCTIONS_COUNT_CALLS
    std::printf("FunctionCoeffSin2::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
                __func__, __LINE__, __FILE__);
    //  analVars.Print();
    allVars.Print();
#endif
    
    //if (matchArgs(allVars, analVars, cat_tag)) return 1;
    
    return 0;
}
  
  Int_t FunctionCoeffSin2::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
#ifdef FUNCTIONS_COUNT_CALLS
    std::printf("FunctionCoeffSin2::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
                __func__, __LINE__, __FILE__);
    //analVars.Print();
    allVars.Print();
    if (normSet) normSet->Print();
    if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
#endif
    
    //if (matchArgs(allVars, analVars, cat_tag)) return 1;
    
    return 0;
}
} // namespace functions
} // namespace roofit
} // namespace doofit
