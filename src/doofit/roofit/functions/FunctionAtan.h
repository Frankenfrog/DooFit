/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_FUNCTIONS_FUNCTIONATAN
#define DOOFIT_ROOFIT_FUNCTIONS_FUNCTIONATAN

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TMath.h"

//#define FUNCTIONS_COUNT_CALLS

namespace doofit {
namespace roofit {
namespace functions {

class FunctionAtan : public RooAbsReal {
public:
  FunctionAtan() {} ; 
  FunctionAtan(const char *name, const char *title,
	      RooAbsReal& _par_x,
	      RooAbsReal& _par_slope_a,
	      RooAbsReal& _par_slope_b);
  FunctionAtan(const FunctionAtan& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new FunctionAtan(*this,newname); }
  inline virtual ~FunctionAtan() {
    #ifdef FUNCTIONS_COUNT_CALLS
    std::cout << "FunctionAtan::~FunctionAtan(): # evaluate calls: " << num_calls_evaluate_ << std::endl;
    std::cout << "FunctionAtan::~FunctionAtan(): # integral calls: " << num_calls_integral_ << std::endl;
    #endif
  }

protected:

  RooRealProxy par_x ;
  RooRealProxy par_slope_a ;
  RooRealProxy par_slope_b ;
  
  static long long num_calls_evaluate_;
  static long long num_calls_integral_;
  
  inline Double_t evaluate() const {
    #ifdef FUNCTIONS_COUNT_CALLS
    ++num_calls_evaluate_;
    #endif
    // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
    
    //++num_calls_;
    
    //    std::cout << (TMath::ATan(par_x*exp(par_slope_a*par_x+par_slope_b)))*(1-par_beta*par_x)/1.570796327 << std::endl;
    
    return (TMath::ATan(par_x*TMath::Exp(par_slope_a*par_x+par_slope_b)))/1.570796327;
  }

  virtual Int_t	getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars,
                                      const char* rangeName = 0) const;
  
private:

  ClassDef(FunctionAtan,1) // Your description goes here...
};
  
} // namespace functions
} // namespace roofit
} // namespace doofit
 
#endif
