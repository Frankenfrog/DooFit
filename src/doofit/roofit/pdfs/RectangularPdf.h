/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

/// homebrewed PDF to model rectangular function. returns 1 if inside range and 0 everywhere else
/// Author: Christophe Cauet
/// Date: 2014-04-28

#ifndef DOOFIT_ROOFIT_PDFS_RECTANGULARPDF
#define DOOFIT_ROOFIT_PDFS_RECTANGULARPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

namespace doofit {
namespace roofit {
namespace pdfs {

class RectangularPdf : public RooAbsPdf {
public:
  RectangularPdf() {} ; 
  RectangularPdf(const std::string name,
	      RooAbsReal& _x_,
        double _range_min_,
	      double _range_max_);
  RectangularPdf(const RectangularPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new RectangularPdf(*this,newname); }
  inline virtual ~RectangularPdf() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

  RooRealProxy x_ ;
  double range_min_ ;
  double range_max_ ;
  
  Double_t evaluate() const ;

private:

  ClassDef(RectangularPdf,1) // homebrewed PDF to model rectangular function
};

}
}
}

#endif
