/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

/// modified RooCubicSplineFun
/// Author: Christophe Cauet
/// Date: 2014-04-29

#ifndef DOOFIT_ROOFIT_PDFS_DOOCUBICSPLINEPDF
#define DOOFIT_ROOFIT_PDFS_DOOCUBICSPLINEPDF

// from STL
#include <string>
#include <vector>

// from RooFit
#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooListProxy.h"
#include "RooArgList.h"
#include "RooAbsReal.h"
  #include "RooRealVar.h"

// from LHCb P2VV
#include "P2VV/RooCubicSplineKnot.h"
#include "P2VV/RooAbsGaussModelEfficiency.h"

namespace doofit {
namespace roofit {
namespace pdfs {

class DooCubicSplinePdf : public RooAbsPdf {
public:
  DooCubicSplinePdf();

  DooCubicSplinePdf(const std::string name, 
                    RooRealVar& x,
                    const std::vector<double>& knots, 
                    const RooArgList& coefList);

  ~DooCubicSplinePdf();

  DooCubicSplinePdf(const DooCubicSplinePdf& other, const char* name=0);
  TObject* clone(const char* newname) const { return new DooCubicSplinePdf(*this,newname); }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

  Int_t getMaxVal(const RooArgSet& vars) const;
  Double_t maxVal(Int_t code) const;

  // for use as RooAbsGaussModelEfficiency...
  // std::complex<double> productAnalyticalIntegral(Double_t umin, 
  //                                                Double_t umax,
  //                                                Double_t scale, 
  //                                                Double_t offset,
  //                                                const std::complex<double>& z) const;

  unsigned knotSize() const { return _aux.size(); }
  double u(int i) const { return _aux.u(i); }
  const std::vector<double>& knots() const { return _aux.knots(); }
  const RooArgList& coefficients() const { return _coefList; }

protected:

private:

  RooRealProxy _x;
  RooListProxy _coefList ;
  RooCubicSplineKnot _aux;

  void init(const char* name, const std::vector<double>& heights,
            const std::vector<double>& errors, double smooth, bool constCoeffs);

  Double_t evaluate() const;

  // for use in RooGaussEfficiencyModel...
  // std::complex<double> gaussIntegralE(bool left, const RooGaussModelAcceptance::M_n<4U>& dM,
  //                          const RooGaussModelAcceptance::K_n& K,
  //                          double offset, double* sc) const ;

  ClassDef(DooCubicSplinePdf,1) // modified RooCubicSplineFun
};

}
}
} 

#endif
