/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_PDFS_CUBICSPLINEPDF
#define DOOFIT_ROOFIT_PDFS_CUBICSPLINEPDF

#include <vector>

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsPdf.h"
#include "RooAbsCategory.h"
#include "RooArgList.h"

namespace doofit {
namespace roofit {
namespace pdfs {

class CubicSplinePdf : public RooAbsPdf {
public:
  CubicSplinePdf(); 
  CubicSplinePdf(const std::string name,
	      RooAbsReal& _x_,
        std::vector<double>& _knots_, 
        RooArgList& _coefList_);
  
  CubicSplinePdf(const CubicSplinePdf& other, const char* name=0) ;
  
  virtual TObject* clone(const char* newname) const { return new CubicSplinePdf(*this,newname); }
  
  inline virtual ~CubicSplinePdf() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

  RooRealProxy x_ ;
  std::vector<double>& knots_;
  RooArgList& coefList_;

  Double_t evaluate() const ;

private:

  ClassDef(CubicSplinePdf,1) // Your description goes here...
};
 
}
}
}

#endif
