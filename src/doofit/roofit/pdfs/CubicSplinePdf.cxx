/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

#include "Riostream.h" 

#include "CubicSplinePdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::pdfs::CubicSplinePdf) 

namespace doofit {
namespace roofit {
namespace pdfs {

 CubicSplinePdf::CubicSplinePdf(const std::string name, 
                        RooRealVar& _x_,
                        std::vector<double>& _knots_, 
                        RooArgList& _coefList_,
                        double _max_range_) :
   RooAbsPdf(name.c_str(),name.c_str()), 
   x_("x_","x_",this,_x_),
   cubic_spline_fun_("cubic_spline_fun_", "cubic_spline_fun_", _x_, _knots_, _coefList_),
   max_range_(_max_range_)
 { 
   cubic_spline_fun_.Print();
 } 


 CubicSplinePdf::CubicSplinePdf(const CubicSplinePdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   x_("x_",this,other.x_),
   cubic_spline_fun_(other.cubic_spline_fun_),
   max_range_(other.max_range_)
 { 
 } 


 Double_t CubicSplinePdf::evaluate() const 
 { 
   // std::cout << cubic_spline_fun_.getVal() << std::endl;
   if ( (x_ >= 0.0) && (x_ <= max_range_) ){
      return cubic_spline_fun_.getVal();
   }
   else{
      return 0;
   }
 } 



 Int_t CubicSplinePdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const  
 { 
   return cubic_spline_fun_.getAnalyticalIntegral(allVars, analVars, rangeName);
 } 



 Double_t CubicSplinePdf::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   return cubic_spline_fun_.analyticalIntegral(code, rangeName);
 } 

}
}
}

