#!/bin/bash
uuid=`uuidgen -r`

module=$1
dv_version=$2
base_dir=$3
expected_args=3
# set number of CPUs (not used currently)
num_cpu=$((`cat /proc/cpuinfo | grep processor | wc -l` / 2))
#CMAKE=/usr/local/bin/cmake

if [ $# -ne $expected_args ]
then
  echo "Usage: `basename $0` Module DaVinciVersion BaseDir"
  exit 2
fi

shift
shift
shift

echo "Installing $module for DaVinci $dv_version from $base_dir"
source /lhcbsoft/LHCbSoftwareSetup.sh > /dev/null 2>&1
# source SetupProject.sh DaVinci $dv_version > /dev/null 2>&1
# source LoadDooSoftware --ignore-local
lb-run DaVinci/$dv_version LoadDooSoftware --ignore-local
ROOTVERS=$(lb-run DaVinci/$dv_version root-config --version | tr "/" ".")
ROOTSYS=$(lb-run DaVinci/v42r0 echo '$ROOTSYS')
# setting the correct compiler versions from the cvmfs
CC=$(lb-run DaVinci/v42r0 echo '$CC')
CXX=$(lb-run DaVinci/v42r0 echo '$CXX')

mkdir /tmp/$uuid
cd /tmp/$uuid
echo "Starting build"
echo

#cmake -DCMAKE_INSTALL_PREFIX=$DOOSOFTROOT/$module/ROOT_v$ROOTVERS $base_dir && make VERBOSE="" -j $num_cpu
$CMAKE_EXECUTABLE -DCMAKE_INSTALL_PREFIX=$DOOSOFTROOT/$module/ROOT_v$ROOTVERS $base_dir -DCMAKE_BUILD_TYPE=Release && make VERBOSE=""
rc=$?
if [[ $rc != 0 ]] ; then
  make VERBOSE=""
  echo
  echo
  echo
  echo
  echo "ERROR: Could not complete build for DaVinci $dv_version"
  echo
  echo
  echo
  echo
  rm -rf /tmp/$uuid
  exit 1
fi
echo
echo "Deleting old version and installing new."
echo
rm -rf $DOOSOFTROOT/$module/ROOT_v$ROOTVERS
mkdir -p $DOOSOFTROOT/$module/ROOT_v$ROOTVERS
make install
cd /
rm -rf /tmp/$uuid

echo
echo "Build successful for DaVinci $dv_version"
echo

